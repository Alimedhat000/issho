// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id        String   @id @default(cuid())
  title     String
  shortCode String   @unique @map("short_code") // 10 chars that will be used for links 
  creatorId String?  @map("creator_id") // Optional - null for anonymous events
  folderId String?  @map("folder_id") 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  timezone  String? // IANA timezone for the event
  startTime String?  @map("start_time") // only if dates and times were selected Null if only dates
  endTime   String?  @map("end_time")
  timeIncrement Int? @map("time_increment") // 15, 30, 60

  Participant Participant[]
  TimeSlot    TimeSlot[]
  creator     User?         @relation("EventCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  folder      Folder?       @relation(fields: [folderId], references: [id], onDelete: SetNull)
  EventDates  EventDate[]

  @@map("event")
}

model Folder{
  id        String   @id @default(cuid())
  name      String
  color     String   // Hex color code for folder
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  events Event[]

  @@unique([name, userId])
  @@map("folder")
}

model EventDate {
  id      String    @id @default(cuid())
  eventId String
  date    DateTime? // For specific date, if empty use weekdays
  weekday String? // For week days, if empty use dates

  event    Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  TimeSlot TimeSlot[]

  @@unique([eventId, date, weekday])
  @@map("event_dates")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  avatar       String?
  password     String?  
  tokenVersion Int      @default(0)
  googleId     String?  @unique @map("google_id")
  accessToken  String?  @map("access_token")
  refreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  participants  Participant[]
  createdEvents Event[]       @relation("EventCreator")
  folders       Folder[]


  @@map("users")
}

model Participant {
  id      String  @id @default(cuid())
  name    String
  eventId String  @map("event_id")
  userId  String? @map("user_id") // Optional - null for guest participants

  event    Event      @relation(fields: [eventId], references: [id])
  TimeSlot TimeSlot[]
  user     User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("participant")
}

model TimeSlot {
  id            String  @id @default(cuid())
  eventDateId   String  @map("event_date_id")
  hour          Int // 0-23 (24-hour format)
  minute        Int // minutes within the hour for increments
  fullDay       Boolean @default(false) // Only True for Days only without times
  participantId String  @map("participant_id")
  eventId       String  @map("event_id")

  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventDate   EventDate   @relation(fields: [eventDateId], references: [id], onDelete: Cascade)

  @@unique([eventDateId, hour, minute, fullDay, participantId])
  @@map("time_slots")
}

/**
 * EventDate handles either a date or weekday. Only one needs to be filled per entry.
 * TimeSlot references EventDate so you can generate slots for either specific dates or recurring weekdays.
 * For days only without times Each EventDate would have one timeslot with a full day flag
 */
